version: "3"
services:

  # Qraft-Users1
  qraft_users1:
    build:
      context: .
      dockerfile: Dockerfile
    image: qraft_users
    container_name: qraft_users1
    environment:
      - DJANGO_MODE=DEPLOY
    ports:
      - "8001:8000"
    volumes:
      - ./qraft/docker_data/db:/srv/docker-server/database
      - ./qraft/docker_data/logs:/srv/docker-server/logs

 # Qraft-Users2
  qraft_users2:
    build:
      context: .
      dockerfile: Dockerfile
    image: qraft_users
    container_name: qraft_users2
    environment:
      - DJANGO_MODE=DEPLOY
    ports:
      - "8002:8000"
    volumes:
      - ./qraft/docker_data/db:/srv/docker-server/database
      - ./qraft/docker_data/logs:/srv/docker-server/logs

 # Qraft-Users3
  qraft_users3:
    build:
      context: .
      dockerfile: Dockerfile
    image: qraft_users
    container_name: qraft_users3
    environment:
      - DJANGO_MODE=DEPLOY
    ports:
      - "8003:8000"
    volumes:
      - ./qraft/docker_data/db:/srv/docker-server/database
      - ./qraft/docker_data/logs:/srv/docker-server/logs
  
  # HAProxy
  HAProxy:
    image: haproxy
    container_name: haproxy
    depends_on:
      - qraft_users1
      - qraft_users2
      - qraft_users3
    environment:
      - BALANCE=leastconn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./haproxy/:/usr/local/etc/haproxy/
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"
  
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/config:/etc/prometheus/
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    expose:
      - "9090"
    links:
      - container_exporter:container_exporter

  # # CAdvisor
  # cadvisor:
  #   image: google/cadvisor
  #   container_name: cadvisor
  #   restart: unless-stopped
  #   volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - /dev/disk/:/dev/disk:ro
  #   expose:
  #     - "8080"
  #   ports:
  #     - "8080:8080"
  
  container_exporter:
    image: prom/container-exporter
    container_name: container_exporter
    restart: unless-stopped
    volumes:
      - /sys/fs/cgroup:/cgroup
      - /var/run/docker.sock:/var/run/docker.sock
    expose:
      - "9104"
    ports:
      - "9104:9104"
  
  # # Grafana
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   links:
  #     - prometheus:prometheus
  #   volumes:
  #     - ./grafana/data:/var/lib/grafana
  #     # - ./grafana/config:/etc/grafana
  #   ports:
  #     - "3000:3000"
  #   user: root
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_USERS_ALLOW_SIGN_UP=false

  # node-exporter는 Host 정보를 얻어야 하기에 호스트에 직접 설치
  # node-exporter:
  #   image: prom/node-exporter-linux-arm64:latest
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   ports:
  #     - "9100:9100"
  #   expose:
  #     - "9100"